//
// Generated file, do not edit! Created by nedtool 5.7 from slicing/VNF/Messages/VNF.msg.
//

#ifndef __VNF_M_H
#define __VNF_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0507
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



class VNFMessage;
#include "inet/common/packet/Packet_m.h" // import inet.common.packet.Packet

/**
 * Enum generated from <tt>slicing/VNF/Messages/VNF.msg:22</tt> by nedtool.
 * <pre>
 * enum VNFDirection
 * {
 *     UpLink = 0;
 *     DownLink = 1;
 * }
 * </pre>
 */
enum VNFDirection {
    UpLink = 0,
    DownLink = 1
};

/**
 * Class generated from <tt>slicing/VNF/Messages/VNF.msg:27</tt> by nedtool.
 * <pre>
 * class VNFMessage extends cMessage
 * {
 *     VNFDirection direction \@enum(VNFDirection);
 *     int arrivalIndex;
 *     const inet::Packet *pck;
 * }
 * </pre>
 */
class VNFMessage : public ::omnetpp::cMessage
{
  protected:
    VNFDirection direction = static_cast<VNFDirection>(-1);
    int arrivalIndex = 0;
    const inet::Packet * pck = nullptr;

  private:
    void copy(const VNFMessage& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const VNFMessage&);

  public:
    VNFMessage(const char *name=nullptr);
    VNFMessage(const VNFMessage& other);
    virtual ~VNFMessage();
    VNFMessage& operator=(const VNFMessage& other);
    virtual VNFMessage *dup() const override {return new VNFMessage(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual VNFDirection getDirection() const;
    virtual void setDirection(VNFDirection direction);
    virtual int getArrivalIndex() const;
    virtual void setArrivalIndex(int arrivalIndex);
    virtual const inet::Packet * getPck() const;
    virtual void setPck(const inet::Packet * pck);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const VNFMessage& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, VNFMessage& obj) {obj.parsimUnpack(b);}

#endif // ifndef __VNF_M_H

