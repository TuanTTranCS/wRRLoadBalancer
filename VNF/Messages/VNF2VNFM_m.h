//
// Generated file, do not edit! Created by nedtool 5.7 from slicing/VNF/Messages/VNF2VNFM.msg.
//

#ifndef __VNF2VNFM_M_H
#define __VNF2VNFM_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0507
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



class Vnf2VnfmMessage;
#include "inet/common/packet/Packet_m.h" // import inet.common.packet.Packet

/**
 * Class generated from <tt>slicing/VNF/Messages/VNF2VNFM.msg:24</tt> by nedtool.
 * <pre>
 * class Vnf2VnfmMessage extends cMessage
 * {
 *     double maxCpu;
 *     double maxRam;
 *     double maxStorage;
 * }
 * </pre>
 */
class Vnf2VnfmMessage : public ::omnetpp::cMessage
{
  protected:
    double maxCpu = 0;
    double maxRam = 0;
    double maxStorage = 0;

  private:
    void copy(const Vnf2VnfmMessage& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const Vnf2VnfmMessage&);

  public:
    Vnf2VnfmMessage(const char *name=nullptr);
    Vnf2VnfmMessage(const Vnf2VnfmMessage& other);
    virtual ~Vnf2VnfmMessage();
    Vnf2VnfmMessage& operator=(const Vnf2VnfmMessage& other);
    virtual Vnf2VnfmMessage *dup() const override {return new Vnf2VnfmMessage(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual double getMaxCpu() const;
    virtual void setMaxCpu(double maxCpu);
    virtual double getMaxRam() const;
    virtual void setMaxRam(double maxRam);
    virtual double getMaxStorage() const;
    virtual void setMaxStorage(double maxStorage);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const Vnf2VnfmMessage& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, Vnf2VnfmMessage& obj) {obj.parsimUnpack(b);}

#endif // ifndef __VNF2VNFM_M_H

