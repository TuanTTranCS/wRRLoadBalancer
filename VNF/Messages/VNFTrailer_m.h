//
// Generated file, do not edit! Created by nedtool 5.7 from slicing/VNF/Messages/VNFTrailer.msg.
//

#ifndef __VNFTRAILER_M_H
#define __VNFTRAILER_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0507
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



class VNFTrailer;
#include "inet/common/INETDefs_m.h" // import inet.common.INETDefs

#include "inet/common/packet/chunk/Chunk_m.h" // import inet.common.packet.chunk.Chunk

// cplusplus {{
const inet::B VNF_TRAILER_LENGTH = inet::B(2);
// }}

/**
 * Class generated from <tt>slicing/VNF/Messages/VNFTrailer.msg:24</tt> by nedtool.
 * <pre>
 * class VNFTrailer extends inet::FieldsChunk
 * {
 *     double requiredCpu;
 *     double requiredRam;
 *     double requiredStorage;
 *     int routeConfigId;
 *     int sliceId;
 * }
 * </pre>
 */
class VNFTrailer : public ::inet::FieldsChunk
{
  protected:
    double requiredCpu = 0;
    double requiredRam = 0;
    double requiredStorage = 0;
    int routeConfigId = 0;
    int sliceId = 0;

  private:
    void copy(const VNFTrailer& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const VNFTrailer&);

  public:
    VNFTrailer();
    VNFTrailer(const VNFTrailer& other);
    virtual ~VNFTrailer();
    VNFTrailer& operator=(const VNFTrailer& other);
    virtual VNFTrailer *dup() const override {return new VNFTrailer(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual double getRequiredCpu() const;
    virtual void setRequiredCpu(double requiredCpu);
    virtual double getRequiredRam() const;
    virtual void setRequiredRam(double requiredRam);
    virtual double getRequiredStorage() const;
    virtual void setRequiredStorage(double requiredStorage);
    virtual int getRouteConfigId() const;
    virtual void setRouteConfigId(int routeConfigId);
    virtual int getSliceId() const;
    virtual void setSliceId(int sliceId);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const VNFTrailer& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, VNFTrailer& obj) {obj.parsimUnpack(b);}

#endif // ifndef __VNFTRAILER_M_H

